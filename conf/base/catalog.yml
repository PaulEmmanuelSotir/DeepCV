%YAML 1.2
%TAG !py! tag:yaml.org,2002:python/name:
%TAG !pyobj! tag:yaml.org,2002:python/object:
---
# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/04_user_guide/04_data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataSet
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataSet
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataSet
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different DataSet implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://kedro.readthedocs.io/en/stable/04_user_guide/04_data_catalog.html

# TODO: Replace manual identifier parsing with '!py!name:torchvision.datasets.CIFAR10' tags usage?

cifar10_train: &cifar10
  type: deepcv.meta.data.datasets.PytorchDataset
  torch_dataset: !py!torchvision.datasets.CIFAR10
  root: "data/01_raw/CIFAR/10/train"
  train: True
  download: True

cifar10_test:
  <<: *cifar10
  root: "data/01_raw/CIFAR/10/test"
  train: False

cifar100_train: &cifar100
  type: deepcv.meta.data.datasets.PytorchDataset
  torch_dataset: !py!torchvision.datasets.CIFAR100
  root: "data/01_raw/CIFAR/100/train"
  train: True
  download: True

cifar100_test:
  <<: *cifar100
  root: "data/01_raw/CIFAR/100/test"
  train: False
# imagenet_train: &imagenet
#   type: deepcv.meta.data.datasets.PytorchDataset
#   torch_dataset: !py!torchvision.datasets.ImageNet
#   root: "data/01_raw/ImageNet/32/train"
#   split: "train"

# imagenet_valid:
#   <<: *imagenet
#   root: "data/01_raw/ImageNet/32/valid"
#   split: "val"

# football_img_dataset:
#   type: deepcv.meta.data.datasets.PytorchDataset
#   torch_dataset: !py!deepcv.meta.data.datasets.ImageDataset
#   filepath: data/01_raw/Football/images

#
# football_vid_dataset:
#   type: deepcv.meta.data.datasets.PytorchDataset
#   torch_dataset: !py!deepcv.meta.data.datasets.VideoDataset
#   filepath: data/01_raw/Football/videos

# example_iris_data:
#   type: CSVLocalDataSet
#   filepath: data/01_raw/iris.csv
#   versioned: False
